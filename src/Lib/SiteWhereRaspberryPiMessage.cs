// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SiteWhereRaspberryPiMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace sitewhere_dotnet_agent.Lib.SiteWhere
{

    /// <summary>Holder for reflection information generated from SiteWhereRaspberryPiMessage.proto</summary>
    public static partial class SiteWhereRaspberryPiMessageReflection
    {

        #region Descriptor
        /// <summary>File descriptor for SiteWhereRaspberryPiMessage.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static SiteWhereRaspberryPiMessageReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CiFTaXRlV2hlcmVSYXNwYmVycnlQaU1lc3NhZ2UucHJvdG8ilwYKBU1vZGVs",
                  "GicKCE1ldGFkYXRhEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAkakgEK",
                  "DkRldmljZUxvY2F0aW9uEhIKCmhhcmR3YXJlSWQYASABKAkSEAoIbGF0aXR1",
                  "ZGUYAiABKAESEQoJbG9uZ2l0dWRlGAMgASgBEhEKCWVsZXZhdGlvbhgEIAEo",
                  "ARIRCglldmVudERhdGUYBSABKAYSIQoIbWV0YWRhdGEYBiADKAsyDy5Nb2Rl",
                  "bC5NZXRhZGF0YRqAAQoLRGV2aWNlQWxlcnQSEgoKaGFyZHdhcmVJZBgBIAEo",
                  "CRIRCglhbGVydFR5cGUYAiABKAkSFAoMYWxlcnRNZXNzYWdlGAMgASgJEhEK",
                  "CWV2ZW50RGF0ZRgEIAEoBhIhCghtZXRhZGF0YRgFIAMoCzIPLk1vZGVsLk1l",
                  "dGFkYXRhGj4KC01lYXN1cmVtZW50EhUKDW1lYXN1cmVtZW50SWQYASABKAkS",
                  "GAoQbWVhc3VyZW1lbnRWYWx1ZRgCIAEoARqHAQoSRGV2aWNlTWVhc3VyZW1l",
                  "bnRzEhIKCmhhcmR3YXJlSWQYASABKAkSJwoLbWVhc3VyZW1lbnQYAiADKAsy",
                  "Ei5Nb2RlbC5NZWFzdXJlbWVudBIRCglldmVudERhdGUYAyABKAYSIQoIbWV0",
                  "YWRhdGEYBCADKAsyDy5Nb2RlbC5NZXRhZGF0YRpsCgxEZXZpY2VTdHJlYW0S",
                  "EgoKaGFyZHdhcmVJZBgBIAEoCRIQCghzdHJlYW1JZBgCIAEoCRITCgtjb250",
                  "ZW50VHlwZRgDIAEoCRIhCghtZXRhZGF0YRgEIAMoCzIPLk1vZGVsLk1ldGFk",
                  "YXRhGpQBChBEZXZpY2VTdHJlYW1EYXRhEhIKCmhhcmR3YXJlSWQYASABKAkS",
                  "EAoIc3RyZWFtSWQYAiABKAkSFgoOc2VxdWVuY2VOdW1iZXIYAyABKAYSDAoE",
                  "ZGF0YRgEIAEoDBIRCglldmVudERhdGUYBSABKAYSIQoIbWV0YWRhdGEYBiAD",
                  "KAsyDy5Nb2RlbC5NZXRhZGF0YSK+BAoJU2l0ZVdoZXJlGkEKBkhlYWRlchIj",
                  "Cgdjb21tYW5kGAEgASgOMhIuU2l0ZVdoZXJlLkNvbW1hbmQSEgoKb3JpZ2lu",
                  "YXRvchgCIAEoCRp2Cg5SZWdpc3RlckRldmljZRISCgpoYXJkd2FyZUlkGAEg",
                  "ASgJEhoKEnNwZWNpZmljYXRpb25Ub2tlbhgCIAEoCRIhCghtZXRhZGF0YRgD",
                  "IAMoCzIPLk1vZGVsLk1ldGFkYXRhEhEKCXNpdGVUb2tlbhgEIAEoCRoyCgtB",
                  "Y2tub3dsZWRnZRISCgpoYXJkd2FyZUlkGAEgASgJEg8KB21lc3NhZ2UYAiAB",
                  "KAkaVwoXRGV2aWNlU3RyZWFtRGF0YVJlcXVlc3QSEgoKaGFyZHdhcmVJZBgB",
                  "IAEoCRIQCghzdHJlYW1JZBgCIAEoCRIWCg5zZXF1ZW5jZU51bWJlchgDIAEo",
                  "BiLoAQoHQ29tbWFuZBIICgROT05FEAASFQoRU0VORF9SRUdJU1RSQVRJT04Q",
                  "ARIYChRTRU5EX0FDS05PV0xFREdFTUVOVBACEhgKFFNFTkRfREVWSUNFX0xP",
                  "Q0FUSU9OEAMSFQoRU0VORF9ERVZJQ0VfQUxFUlQQBBIcChhTRU5EX0RFVklD",
                  "RV9NRUFTVVJFTUVOVFMQBRIWChJTRU5EX0RFVklDRV9TVFJFQU0QBhIbChdT",
                  "RU5EX0RFVklDRV9TVFJFQU1fREFUQRAHEh4KGlJFUVVFU1RfREVWSUNFX1NU",
                  "UkVBTV9EQVRBEAgimgYKBkRldmljZRpmCgZIZWFkZXISIAoHY29tbWFuZBgB",
                  "IAEoDjIPLkRldmljZS5Db21tYW5kEhIKCm9yaWdpbmF0b3IYAiABKAkSEgoK",
                  "bmVzdGVkUGF0aBgDIAEoCRISCgpuZXN0ZWRTcGVjGAQgASgJGoUBCg9SZWdp",
                  "c3RyYXRpb25BY2sSKwoFc3RhdGUYASABKA4yHC5EZXZpY2UuUmVnaXN0cmF0",
                  "aW9uQWNrU3RhdGUSLwoJZXJyb3JUeXBlGAIgASgOMhwuRGV2aWNlLlJlZ2lz",
                  "dHJhdGlvbkFja0Vycm9yEhQKDGVycm9yTWVzc2FnZRgDIAEoCRpQCg9EZXZp",
                  "Y2VTdHJlYW1BY2sSEAoIc3RyZWFtSWQYASABKAkSKwoFc3RhdGUYAiABKA4y",
                  "HC5EZXZpY2UuRGV2aWNlU3RyZWFtQWNrU3RhdGUiYAoHQ29tbWFuZBIICgRO",
                  "T05FEAASFAoQQUNLX1JFR0lTVFJBVElPThABEhUKEUFDS19ERVZJQ0VfU1RS",
                  "RUFNEAISHgoaUkVDRUlWRV9ERVZJQ0VfU1RSRUFNX0RBVEEQAyJ7ChRSZWdp",
                  "c3RyYXRpb25BY2tTdGF0ZRIdChlOT05FX1JlZ2lzdHJhdGlvbkFja1N0YXRl",
                  "EAASFAoQTkVXX1JFR0lTVFJBVElPThABEhYKEkFMUkVBRFlfUkVHSVNURVJF",
                  "RBACEhYKElJFR0lTVFJBVElPTl9FUlJPUhADIn4KFFJlZ2lzdHJhdGlvbkFj",
                  "a0Vycm9yEh0KGU5PTkVfUmVnaXN0cmF0aW9uQWNrRXJyb3IQABIZChVJTlZB",
                  "TElEX1NQRUNJRklDQVRJT04QARIPCgtTSVRFX1RPS0VOXxACEhsKF05FV19E",
                  "RVZJQ0VTX05PVF9BTExPV0VEEAMibwoURGV2aWNlU3RyZWFtQWNrU3RhdGUS",
                  "HQoZTk9ORV9EZXZpY2VTdHJlYW1BY2tTdGF0ZRAAEhIKDlNUUkVBTV9DUkVB",
                  "VEVEEAESEQoNU1RSRUFNX0VYSVNUUxACEhEKDVNUUkVBTV9GQUlMRUQQA0IZ",
                  "qgIWdGVzdE1RVFQuTGliLlNpdGVXaGVyZWIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceLocation), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceLocation.Parser, new[]{ "HardwareId", "Latitude", "Longitude", "Elevation", "EventDate", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceAlert), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceAlert.Parser, new[]{ "HardwareId", "AlertType", "AlertMessage", "EventDate", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement.Parser, new[]{ "MeasurementId", "MeasurementValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceMeasurements), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceMeasurements.Parser, new[]{ "HardwareId", "Measurement", "EventDate", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceStream), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceStream.Parser, new[]{ "HardwareId", "StreamId", "ContentType", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceStreamData), global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.DeviceStreamData.Parser, new[]{ "HardwareId", "StreamId", "SequenceNumber", "Data", "EventDate", "Metadata" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere), global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Parser, null, null, new[]{ typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Command) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Header), global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Header.Parser, new[]{ "Command", "Originator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.RegisterDevice), global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.RegisterDevice.Parser, new[]{ "HardwareId", "SpecificationToken", "Metadata", "SiteToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Acknowledge), global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Acknowledge.Parser, new[]{ "HardwareId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.DeviceStreamDataRequest), global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.DeviceStreamDataRequest.Parser, new[]{ "HardwareId", "StreamId", "SequenceNumber" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device), global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Parser, null, null, new[]{ typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.Command), typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckState), typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckError), typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.DeviceStreamAckState) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.Header), global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.Header.Parser, new[]{ "Command", "Originator", "NestedPath", "NestedSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAck), global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAck.Parser, new[]{ "State", "ErrorType", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.DeviceStreamAck), global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.DeviceStreamAck.Parser, new[]{ "StreamId", "State" }, null, null, null)})
                }));
        }
        #endregion

    }
    #region Messages
    /// <summary>
    ///  Model Objects
    /// </summary>
    public sealed partial class Model : pb::IMessage<Model>
    {
        private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Model> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhereRaspberryPiMessageReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Model()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Model(Model other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Model Clone()
        {
            return new Model(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Model);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Model other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Model other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Model message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            /// <summary>
            ///  A single piece of metadata.
            /// </summary>
            public sealed partial class Metadata : pb::IMessage<Metadata>
            {
                private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Metadata()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Metadata(Metadata other) : this()
                {
                    name_ = other.name_;
                    value_ = other.value_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Metadata Clone()
                {
                    return new Metadata(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name
                {
                    get { return name_; }
                    set
                    {
                        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 2;
                private string value_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Value
                {
                    get { return value_; }
                    set
                    {
                        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Metadata);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Metadata other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Name != other.Name) return false;
                    if (Value != other.Value) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Name.Length != 0) hash ^= Name.GetHashCode();
                    if (Value.Length != 0) hash ^= Value.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Name.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Name);
                    }
                    if (Value.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Value);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Name.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                    }
                    if (Value.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Metadata other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Name.Length != 0)
                    {
                        Name = other.Name;
                    }
                    if (other.Value.Length != 0)
                    {
                        Value = other.Value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Name = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    Value = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Report device location.
            /// </summary>
            public sealed partial class DeviceLocation : pb::IMessage<DeviceLocation>
            {
                private static readonly pb::MessageParser<DeviceLocation> _parser = new pb::MessageParser<DeviceLocation>(() => new DeviceLocation());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceLocation> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceLocation()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceLocation(DeviceLocation other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    latitude_ = other.latitude_;
                    longitude_ = other.longitude_;
                    elevation_ = other.elevation_;
                    eventDate_ = other.eventDate_;
                    metadata_ = other.metadata_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceLocation Clone()
                {
                    return new DeviceLocation(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "latitude" field.</summary>
                public const int LatitudeFieldNumber = 2;
                private double latitude_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double Latitude
                {
                    get { return latitude_; }
                    set
                    {
                        latitude_ = value;
                    }
                }

                /// <summary>Field number for the "longitude" field.</summary>
                public const int LongitudeFieldNumber = 3;
                private double longitude_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double Longitude
                {
                    get { return longitude_; }
                    set
                    {
                        longitude_ = value;
                    }
                }

                /// <summary>Field number for the "elevation" field.</summary>
                public const int ElevationFieldNumber = 4;
                private double elevation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double Elevation
                {
                    get { return elevation_; }
                    set
                    {
                        elevation_ = value;
                    }
                }

                /// <summary>Field number for the "eventDate" field.</summary>
                public const int EventDateFieldNumber = 5;
                private ulong eventDate_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong EventDate
                {
                    get { return eventDate_; }
                    set
                    {
                        eventDate_ = value;
                    }
                }

                /// <summary>Field number for the "metadata" field.</summary>
                public const int MetadataFieldNumber = 6;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> _repeated_metadata_codec
                    = pb::FieldCodec.ForMessage(50, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> metadata_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> Metadata
                {
                    get { return metadata_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceLocation);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceLocation other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (Latitude != other.Latitude) return false;
                    if (Longitude != other.Longitude) return false;
                    if (Elevation != other.Elevation) return false;
                    if (EventDate != other.EventDate) return false;
                    if (!metadata_.Equals(other.metadata_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (Latitude != 0D) hash ^= Latitude.GetHashCode();
                    if (Longitude != 0D) hash ^= Longitude.GetHashCode();
                    if (Elevation != 0D) hash ^= Elevation.GetHashCode();
                    if (EventDate != 0UL) hash ^= EventDate.GetHashCode();
                    hash ^= metadata_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (Latitude != 0D)
                    {
                        output.WriteRawTag(17);
                        output.WriteDouble(Latitude);
                    }
                    if (Longitude != 0D)
                    {
                        output.WriteRawTag(25);
                        output.WriteDouble(Longitude);
                    }
                    if (Elevation != 0D)
                    {
                        output.WriteRawTag(33);
                        output.WriteDouble(Elevation);
                    }
                    if (EventDate != 0UL)
                    {
                        output.WriteRawTag(41);
                        output.WriteFixed64(EventDate);
                    }
                    metadata_.WriteTo(output, _repeated_metadata_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (Latitude != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (Longitude != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (Elevation != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (EventDate != 0UL)
                    {
                        size += 1 + 8;
                    }
                    size += metadata_.CalculateSize(_repeated_metadata_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceLocation other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.Latitude != 0D)
                    {
                        Latitude = other.Latitude;
                    }
                    if (other.Longitude != 0D)
                    {
                        Longitude = other.Longitude;
                    }
                    if (other.Elevation != 0D)
                    {
                        Elevation = other.Elevation;
                    }
                    if (other.EventDate != 0UL)
                    {
                        EventDate = other.EventDate;
                    }
                    metadata_.Add(other.metadata_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 17:
                                {
                                    Latitude = input.ReadDouble();
                                    break;
                                }
                            case 25:
                                {
                                    Longitude = input.ReadDouble();
                                    break;
                                }
                            case 33:
                                {
                                    Elevation = input.ReadDouble();
                                    break;
                                }
                            case 41:
                                {
                                    EventDate = input.ReadFixed64();
                                    break;
                                }
                            case 50:
                                {
                                    metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Report device alert.
            /// </summary>
            public sealed partial class DeviceAlert : pb::IMessage<DeviceAlert>
            {
                private static readonly pb::MessageParser<DeviceAlert> _parser = new pb::MessageParser<DeviceAlert>(() => new DeviceAlert());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceAlert> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceAlert()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceAlert(DeviceAlert other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    alertType_ = other.alertType_;
                    alertMessage_ = other.alertMessage_;
                    eventDate_ = other.eventDate_;
                    metadata_ = other.metadata_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceAlert Clone()
                {
                    return new DeviceAlert(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "alertType" field.</summary>
                public const int AlertTypeFieldNumber = 2;
                private string alertType_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string AlertType
                {
                    get { return alertType_; }
                    set
                    {
                        alertType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "alertMessage" field.</summary>
                public const int AlertMessageFieldNumber = 3;
                private string alertMessage_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string AlertMessage
                {
                    get { return alertMessage_; }
                    set
                    {
                        alertMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "eventDate" field.</summary>
                public const int EventDateFieldNumber = 4;
                private ulong eventDate_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong EventDate
                {
                    get { return eventDate_; }
                    set
                    {
                        eventDate_ = value;
                    }
                }

                /// <summary>Field number for the "metadata" field.</summary>
                public const int MetadataFieldNumber = 5;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> _repeated_metadata_codec
                    = pb::FieldCodec.ForMessage(42, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> metadata_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> Metadata
                {
                    get { return metadata_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceAlert);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceAlert other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (AlertType != other.AlertType) return false;
                    if (AlertMessage != other.AlertMessage) return false;
                    if (EventDate != other.EventDate) return false;
                    if (!metadata_.Equals(other.metadata_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (AlertType.Length != 0) hash ^= AlertType.GetHashCode();
                    if (AlertMessage.Length != 0) hash ^= AlertMessage.GetHashCode();
                    if (EventDate != 0UL) hash ^= EventDate.GetHashCode();
                    hash ^= metadata_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (AlertType.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(AlertType);
                    }
                    if (AlertMessage.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(AlertMessage);
                    }
                    if (EventDate != 0UL)
                    {
                        output.WriteRawTag(33);
                        output.WriteFixed64(EventDate);
                    }
                    metadata_.WriteTo(output, _repeated_metadata_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (AlertType.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlertType);
                    }
                    if (AlertMessage.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlertMessage);
                    }
                    if (EventDate != 0UL)
                    {
                        size += 1 + 8;
                    }
                    size += metadata_.CalculateSize(_repeated_metadata_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceAlert other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.AlertType.Length != 0)
                    {
                        AlertType = other.AlertType;
                    }
                    if (other.AlertMessage.Length != 0)
                    {
                        AlertMessage = other.AlertMessage;
                    }
                    if (other.EventDate != 0UL)
                    {
                        EventDate = other.EventDate;
                    }
                    metadata_.Add(other.metadata_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    AlertType = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    AlertMessage = input.ReadString();
                                    break;
                                }
                            case 33:
                                {
                                    EventDate = input.ReadFixed64();
                                    break;
                                }
                            case 42:
                                {
                                    metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  A single measurement.
            /// </summary>
            public sealed partial class Measurement : pb::IMessage<Measurement>
            {
                private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Measurement()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Measurement(Measurement other) : this()
                {
                    measurementId_ = other.measurementId_;
                    measurementValue_ = other.measurementValue_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Measurement Clone()
                {
                    return new Measurement(this);
                }

                /// <summary>Field number for the "measurementId" field.</summary>
                public const int MeasurementIdFieldNumber = 1;
                private string measurementId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string MeasurementId
                {
                    get { return measurementId_; }
                    set
                    {
                        measurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "measurementValue" field.</summary>
                public const int MeasurementValueFieldNumber = 2;
                private double measurementValue_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double MeasurementValue
                {
                    get { return measurementValue_; }
                    set
                    {
                        measurementValue_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Measurement);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Measurement other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (MeasurementId != other.MeasurementId) return false;
                    if (MeasurementValue != other.MeasurementValue) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (MeasurementId.Length != 0) hash ^= MeasurementId.GetHashCode();
                    if (MeasurementValue != 0D) hash ^= MeasurementValue.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (MeasurementId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(MeasurementId);
                    }
                    if (MeasurementValue != 0D)
                    {
                        output.WriteRawTag(17);
                        output.WriteDouble(MeasurementValue);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (MeasurementId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementId);
                    }
                    if (MeasurementValue != 0D)
                    {
                        size += 1 + 8;
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Measurement other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.MeasurementId.Length != 0)
                    {
                        MeasurementId = other.MeasurementId;
                    }
                    if (other.MeasurementValue != 0D)
                    {
                        MeasurementValue = other.MeasurementValue;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    MeasurementId = input.ReadString();
                                    break;
                                }
                            case 17:
                                {
                                    MeasurementValue = input.ReadDouble();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Event message for device measurements.
            /// </summary>
            public sealed partial class DeviceMeasurements : pb::IMessage<DeviceMeasurements>
            {
                private static readonly pb::MessageParser<DeviceMeasurements> _parser = new pb::MessageParser<DeviceMeasurements>(() => new DeviceMeasurements());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceMeasurements> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[4]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceMeasurements()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceMeasurements(DeviceMeasurements other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    measurement_ = other.measurement_.Clone();
                    eventDate_ = other.eventDate_;
                    metadata_ = other.metadata_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceMeasurements Clone()
                {
                    return new DeviceMeasurements(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "measurement" field.</summary>
                public const int MeasurementFieldNumber = 2;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement> _repeated_measurement_codec
                    = pb::FieldCodec.ForMessage(18, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement> measurement_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Measurement> Measurement
                {
                    get { return measurement_; }
                }

                /// <summary>Field number for the "eventDate" field.</summary>
                public const int EventDateFieldNumber = 3;
                private ulong eventDate_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong EventDate
                {
                    get { return eventDate_; }
                    set
                    {
                        eventDate_ = value;
                    }
                }

                /// <summary>Field number for the "metadata" field.</summary>
                public const int MetadataFieldNumber = 4;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> _repeated_metadata_codec
                    = pb::FieldCodec.ForMessage(34, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> metadata_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> Metadata
                {
                    get { return metadata_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceMeasurements);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceMeasurements other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (!measurement_.Equals(other.measurement_)) return false;
                    if (EventDate != other.EventDate) return false;
                    if (!metadata_.Equals(other.metadata_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    hash ^= measurement_.GetHashCode();
                    if (EventDate != 0UL) hash ^= EventDate.GetHashCode();
                    hash ^= metadata_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    measurement_.WriteTo(output, _repeated_measurement_codec);
                    if (EventDate != 0UL)
                    {
                        output.WriteRawTag(25);
                        output.WriteFixed64(EventDate);
                    }
                    metadata_.WriteTo(output, _repeated_metadata_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    size += measurement_.CalculateSize(_repeated_measurement_codec);
                    if (EventDate != 0UL)
                    {
                        size += 1 + 8;
                    }
                    size += metadata_.CalculateSize(_repeated_metadata_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceMeasurements other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    measurement_.Add(other.measurement_);
                    if (other.EventDate != 0UL)
                    {
                        EventDate = other.EventDate;
                    }
                    metadata_.Add(other.metadata_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    measurement_.AddEntriesFrom(input, _repeated_measurement_codec);
                                    break;
                                }
                            case 25:
                                {
                                    EventDate = input.ReadFixed64();
                                    break;
                                }
                            case 34:
                                {
                                    metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Create a device stream.
            /// </summary>
            public sealed partial class DeviceStream : pb::IMessage<DeviceStream>
            {
                private static readonly pb::MessageParser<DeviceStream> _parser = new pb::MessageParser<DeviceStream>(() => new DeviceStream());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceStream> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[5]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStream()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStream(DeviceStream other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    streamId_ = other.streamId_;
                    contentType_ = other.contentType_;
                    metadata_ = other.metadata_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStream Clone()
                {
                    return new DeviceStream(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "streamId" field.</summary>
                public const int StreamIdFieldNumber = 2;
                private string streamId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string StreamId
                {
                    get { return streamId_; }
                    set
                    {
                        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "contentType" field.</summary>
                public const int ContentTypeFieldNumber = 3;
                private string contentType_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string ContentType
                {
                    get { return contentType_; }
                    set
                    {
                        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "metadata" field.</summary>
                public const int MetadataFieldNumber = 4;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> _repeated_metadata_codec
                    = pb::FieldCodec.ForMessage(34, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> metadata_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> Metadata
                {
                    get { return metadata_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceStream);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceStream other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (StreamId != other.StreamId) return false;
                    if (ContentType != other.ContentType) return false;
                    if (!metadata_.Equals(other.metadata_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
                    if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
                    hash ^= metadata_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (StreamId.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(StreamId);
                    }
                    if (ContentType.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(ContentType);
                    }
                    metadata_.WriteTo(output, _repeated_metadata_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (StreamId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
                    }
                    if (ContentType.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
                    }
                    size += metadata_.CalculateSize(_repeated_metadata_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceStream other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.StreamId.Length != 0)
                    {
                        StreamId = other.StreamId;
                    }
                    if (other.ContentType.Length != 0)
                    {
                        ContentType = other.ContentType;
                    }
                    metadata_.Add(other.metadata_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    StreamId = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    ContentType = input.ReadString();
                                    break;
                                }
                            case 34:
                                {
                                    metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  A chunk of streaming data.
            /// </summary>
            public sealed partial class DeviceStreamData : pb::IMessage<DeviceStreamData>
            {
                private static readonly pb::MessageParser<DeviceStreamData> _parser = new pb::MessageParser<DeviceStreamData>(() => new DeviceStreamData());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceStreamData> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Descriptor.NestedTypes[6]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamData()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamData(DeviceStreamData other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    streamId_ = other.streamId_;
                    sequenceNumber_ = other.sequenceNumber_;
                    data_ = other.data_;
                    eventDate_ = other.eventDate_;
                    metadata_ = other.metadata_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamData Clone()
                {
                    return new DeviceStreamData(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "streamId" field.</summary>
                public const int StreamIdFieldNumber = 2;
                private string streamId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string StreamId
                {
                    get { return streamId_; }
                    set
                    {
                        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "sequenceNumber" field.</summary>
                public const int SequenceNumberFieldNumber = 3;
                private ulong sequenceNumber_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong SequenceNumber
                {
                    get { return sequenceNumber_; }
                    set
                    {
                        sequenceNumber_ = value;
                    }
                }

                /// <summary>Field number for the "data" field.</summary>
                public const int DataFieldNumber = 4;
                private pb::ByteString data_ = pb::ByteString.Empty;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Data
                {
                    get { return data_; }
                    set
                    {
                        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "eventDate" field.</summary>
                public const int EventDateFieldNumber = 5;
                private ulong eventDate_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong EventDate
                {
                    get { return eventDate_; }
                    set
                    {
                        eventDate_ = value;
                    }
                }

                /// <summary>Field number for the "metadata" field.</summary>
                public const int MetadataFieldNumber = 6;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> _repeated_metadata_codec
                    = pb::FieldCodec.ForMessage(50, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> metadata_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> Metadata
                {
                    get { return metadata_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceStreamData);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceStreamData other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (StreamId != other.StreamId) return false;
                    if (SequenceNumber != other.SequenceNumber) return false;
                    if (Data != other.Data) return false;
                    if (EventDate != other.EventDate) return false;
                    if (!metadata_.Equals(other.metadata_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
                    if (SequenceNumber != 0UL) hash ^= SequenceNumber.GetHashCode();
                    if (Data.Length != 0) hash ^= Data.GetHashCode();
                    if (EventDate != 0UL) hash ^= EventDate.GetHashCode();
                    hash ^= metadata_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (StreamId.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(StreamId);
                    }
                    if (SequenceNumber != 0UL)
                    {
                        output.WriteRawTag(25);
                        output.WriteFixed64(SequenceNumber);
                    }
                    if (Data.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteBytes(Data);
                    }
                    if (EventDate != 0UL)
                    {
                        output.WriteRawTag(41);
                        output.WriteFixed64(EventDate);
                    }
                    metadata_.WriteTo(output, _repeated_metadata_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (StreamId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
                    }
                    if (SequenceNumber != 0UL)
                    {
                        size += 1 + 8;
                    }
                    if (Data.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
                    }
                    if (EventDate != 0UL)
                    {
                        size += 1 + 8;
                    }
                    size += metadata_.CalculateSize(_repeated_metadata_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceStreamData other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.StreamId.Length != 0)
                    {
                        StreamId = other.StreamId;
                    }
                    if (other.SequenceNumber != 0UL)
                    {
                        SequenceNumber = other.SequenceNumber;
                    }
                    if (other.Data.Length != 0)
                    {
                        Data = other.Data;
                    }
                    if (other.EventDate != 0UL)
                    {
                        EventDate = other.EventDate;
                    }
                    metadata_.Add(other.metadata_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    StreamId = input.ReadString();
                                    break;
                                }
                            case 25:
                                {
                                    SequenceNumber = input.ReadFixed64();
                                    break;
                                }
                            case 34:
                                {
                                    Data = input.ReadBytes();
                                    break;
                                }
                            case 41:
                                {
                                    EventDate = input.ReadFixed64();
                                    break;
                                }
                            case 50:
                                {
                                    metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    /// <summary>
    ///  Commands sent from a device to SiteWhere.
    /// </summary>
    public sealed partial class SiteWhere : pb::IMessage<SiteWhere>
    {
        private static readonly pb::MessageParser<SiteWhere> _parser = new pb::MessageParser<SiteWhere>(() => new SiteWhere());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SiteWhere> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhereRaspberryPiMessageReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SiteWhere()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SiteWhere(SiteWhere other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SiteWhere Clone()
        {
            return new SiteWhere(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SiteWhere);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SiteWhere other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SiteWhere other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SiteWhere message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Command
            {
                [pbr::OriginalName("NONE")]
                None = 0,
                [pbr::OriginalName("SEND_REGISTRATION")]
                SendRegistration = 1,
                [pbr::OriginalName("SEND_ACKNOWLEDGEMENT")]
                SendAcknowledgement = 2,
                [pbr::OriginalName("SEND_DEVICE_LOCATION")]
                SendDeviceLocation = 3,
                [pbr::OriginalName("SEND_DEVICE_ALERT")]
                SendDeviceAlert = 4,
                [pbr::OriginalName("SEND_DEVICE_MEASUREMENTS")]
                SendDeviceMeasurements = 5,
                [pbr::OriginalName("SEND_DEVICE_STREAM")]
                SendDeviceStream = 6,
                [pbr::OriginalName("SEND_DEVICE_STREAM_DATA")]
                SendDeviceStreamData = 7,
                [pbr::OriginalName("REQUEST_DEVICE_STREAM_DATA")]
                RequestDeviceStreamData = 8,
            }

            /// <summary>
            ///  Header contains the command and originator.
            /// </summary>
            public sealed partial class Header : pb::IMessage<Header>
            {
                private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Header> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Header()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Header(Header other) : this()
                {
                    command_ = other.command_;
                    originator_ = other.originator_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Header Clone()
                {
                    return new Header(this);
                }

                /// <summary>Field number for the "command" field.</summary>
                public const int CommandFieldNumber = 1;
                private global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Command command_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Command Command
                {
                    get { return command_; }
                    set
                    {
                        command_ = value;
                    }
                }

                /// <summary>Field number for the "originator" field.</summary>
                public const int OriginatorFieldNumber = 2;
                private string originator_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Originator
                {
                    get { return originator_; }
                    set
                    {
                        originator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Header);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Header other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Command != other.Command) return false;
                    if (Originator != other.Originator) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Command != 0) hash ^= Command.GetHashCode();
                    if (Originator.Length != 0) hash ^= Originator.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Command != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteEnum((int)Command);
                    }
                    if (Originator.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Originator);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Command != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Command);
                    }
                    if (Originator.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Originator);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Header other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Command != 0)
                    {
                        Command = other.Command;
                    }
                    if (other.Originator.Length != 0)
                    {
                        Originator = other.Originator;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    command_ = (global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Types.Command)input.ReadEnum();
                                    break;
                                }
                            case 18:
                                {
                                    Originator = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Register a device with SiteWhere.
            /// </summary>
            public sealed partial class RegisterDevice : pb::IMessage<RegisterDevice>
            {
                private static readonly pb::MessageParser<RegisterDevice> _parser = new pb::MessageParser<RegisterDevice>(() => new RegisterDevice());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<RegisterDevice> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RegisterDevice()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RegisterDevice(RegisterDevice other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    specificationToken_ = other.specificationToken_;
                    metadata_ = other.metadata_.Clone();
                    siteToken_ = other.siteToken_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RegisterDevice Clone()
                {
                    return new RegisterDevice(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "specificationToken" field.</summary>
                public const int SpecificationTokenFieldNumber = 2;
                private string specificationToken_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SpecificationToken
                {
                    get { return specificationToken_; }
                    set
                    {
                        specificationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "metadata" field.</summary>
                public const int MetadataFieldNumber = 3;
                private static readonly pb::FieldCodec<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> _repeated_metadata_codec
                    = pb::FieldCodec.ForMessage(26, global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata.Parser);
                private readonly pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> metadata_ = new pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::sitewhere_dotnet_agent.Lib.SiteWhere.Model.Types.Metadata> Metadata
                {
                    get { return metadata_; }
                }

                /// <summary>Field number for the "siteToken" field.</summary>
                public const int SiteTokenFieldNumber = 4;
                private string siteToken_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SiteToken
                {
                    get { return siteToken_; }
                    set
                    {
                        siteToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as RegisterDevice);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(RegisterDevice other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (SpecificationToken != other.SpecificationToken) return false;
                    if (!metadata_.Equals(other.metadata_)) return false;
                    if (SiteToken != other.SiteToken) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (SpecificationToken.Length != 0) hash ^= SpecificationToken.GetHashCode();
                    hash ^= metadata_.GetHashCode();
                    if (SiteToken.Length != 0) hash ^= SiteToken.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (SpecificationToken.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(SpecificationToken);
                    }
                    metadata_.WriteTo(output, _repeated_metadata_codec);
                    if (SiteToken.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(SiteToken);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (SpecificationToken.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecificationToken);
                    }
                    size += metadata_.CalculateSize(_repeated_metadata_codec);
                    if (SiteToken.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SiteToken);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(RegisterDevice other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.SpecificationToken.Length != 0)
                    {
                        SpecificationToken = other.SpecificationToken;
                    }
                    metadata_.Add(other.metadata_);
                    if (other.SiteToken.Length != 0)
                    {
                        SiteToken = other.SiteToken;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    SpecificationToken = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
                                    break;
                                }
                            case 34:
                                {
                                    SiteToken = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Acknowledge previous command.
            /// </summary>
            public sealed partial class Acknowledge : pb::IMessage<Acknowledge>
            {
                private static readonly pb::MessageParser<Acknowledge> _parser = new pb::MessageParser<Acknowledge>(() => new Acknowledge());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Acknowledge> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Acknowledge()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Acknowledge(Acknowledge other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    message_ = other.message_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Acknowledge Clone()
                {
                    return new Acknowledge(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "message" field.</summary>
                public const int MessageFieldNumber = 2;
                private string message_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Message
                {
                    get { return message_; }
                    set
                    {
                        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Acknowledge);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Acknowledge other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (Message != other.Message) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (Message.Length != 0) hash ^= Message.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (Message.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Message);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (Message.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Acknowledge other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.Message.Length != 0)
                    {
                        Message = other.Message;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    Message = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Request for a chunk of data from a device stream.
            /// </summary>
            public sealed partial class DeviceStreamDataRequest : pb::IMessage<DeviceStreamDataRequest>
            {
                private static readonly pb::MessageParser<DeviceStreamDataRequest> _parser = new pb::MessageParser<DeviceStreamDataRequest>(() => new DeviceStreamDataRequest());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceStreamDataRequest> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhere.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamDataRequest()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamDataRequest(DeviceStreamDataRequest other) : this()
                {
                    hardwareId_ = other.hardwareId_;
                    streamId_ = other.streamId_;
                    sequenceNumber_ = other.sequenceNumber_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamDataRequest Clone()
                {
                    return new DeviceStreamDataRequest(this);
                }

                /// <summary>Field number for the "hardwareId" field.</summary>
                public const int HardwareIdFieldNumber = 1;
                private string hardwareId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string HardwareId
                {
                    get { return hardwareId_; }
                    set
                    {
                        hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "streamId" field.</summary>
                public const int StreamIdFieldNumber = 2;
                private string streamId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string StreamId
                {
                    get { return streamId_; }
                    set
                    {
                        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "sequenceNumber" field.</summary>
                public const int SequenceNumberFieldNumber = 3;
                private ulong sequenceNumber_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong SequenceNumber
                {
                    get { return sequenceNumber_; }
                    set
                    {
                        sequenceNumber_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceStreamDataRequest);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceStreamDataRequest other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (HardwareId != other.HardwareId) return false;
                    if (StreamId != other.StreamId) return false;
                    if (SequenceNumber != other.SequenceNumber) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
                    if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
                    if (SequenceNumber != 0UL) hash ^= SequenceNumber.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HardwareId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(HardwareId);
                    }
                    if (StreamId.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(StreamId);
                    }
                    if (SequenceNumber != 0UL)
                    {
                        output.WriteRawTag(25);
                        output.WriteFixed64(SequenceNumber);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HardwareId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
                    }
                    if (StreamId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
                    }
                    if (SequenceNumber != 0UL)
                    {
                        size += 1 + 8;
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceStreamDataRequest other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HardwareId.Length != 0)
                    {
                        HardwareId = other.HardwareId;
                    }
                    if (other.StreamId.Length != 0)
                    {
                        StreamId = other.StreamId;
                    }
                    if (other.SequenceNumber != 0UL)
                    {
                        SequenceNumber = other.SequenceNumber;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    HardwareId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    StreamId = input.ReadString();
                                    break;
                                }
                            case 25:
                                {
                                    SequenceNumber = input.ReadFixed64();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    /// <summary>
    ///  Commands sent from SiteWhere to a device.
    /// </summary>
    public sealed partial class Device : pb::IMessage<Device>
    {
        private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Device> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.SiteWhereRaspberryPiMessageReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Device()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Device(Device other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Device Clone()
        {
            return new Device(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Device);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Device other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Device other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Device message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Command
            {
                [pbr::OriginalName("NONE")]
                None = 0,
                [pbr::OriginalName("ACK_REGISTRATION")]
                AckRegistration = 1,
                [pbr::OriginalName("ACK_DEVICE_STREAM")]
                AckDeviceStream = 2,
                [pbr::OriginalName("RECEIVE_DEVICE_STREAM_DATA")]
                ReceiveDeviceStreamData = 3,
            }

            /// <summary>
            ///  Enumeration of registation state responses.
            /// </summary>
            public enum RegistrationAckState
            {
                [pbr::OriginalName("NONE_RegistrationAckState")]
                NoneRegistrationAckState = 0,
                [pbr::OriginalName("NEW_REGISTRATION")]
                NewRegistration = 1,
                [pbr::OriginalName("ALREADY_REGISTERED")]
                AlreadyRegistered = 2,
                [pbr::OriginalName("REGISTRATION_ERROR")]
                RegistrationError = 3,
            }

            public enum RegistrationAckError
            {
                [pbr::OriginalName("NONE_RegistrationAckError")]
                NoneRegistrationAckError = 0,
                [pbr::OriginalName("INVALID_SPECIFICATION")]
                InvalidSpecification = 1,
                [pbr::OriginalName("SITE_TOKEN_")]
                SiteToken = 2,
                [pbr::OriginalName("NEW_DEVICES_NOT_ALLOWED")]
                NewDevicesNotAllowed = 3,
            }

            /// <summary>
            ///  Enumeration of device stream creation responses.
            /// </summary>
            public enum DeviceStreamAckState
            {
                [pbr::OriginalName("NONE_DeviceStreamAckState")]
                NoneDeviceStreamAckState = 0,
                [pbr::OriginalName("STREAM_CREATED")]
                StreamCreated = 1,
                [pbr::OriginalName("STREAM_EXISTS")]
                StreamExists = 2,
                [pbr::OriginalName("STREAM_FAILED")]
                StreamFailed = 3,
            }

            /// <summary>
            ///  Header contains the command and originator.
            /// </summary>
            public sealed partial class Header : pb::IMessage<Header>
            {
                private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Header> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Header()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Header(Header other) : this()
                {
                    command_ = other.command_;
                    originator_ = other.originator_;
                    nestedPath_ = other.nestedPath_;
                    nestedSpec_ = other.nestedSpec_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Header Clone()
                {
                    return new Header(this);
                }

                /// <summary>Field number for the "command" field.</summary>
                public const int CommandFieldNumber = 1;
                private global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.Command command_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.Command Command
                {
                    get { return command_; }
                    set
                    {
                        command_ = value;
                    }
                }

                /// <summary>Field number for the "originator" field.</summary>
                public const int OriginatorFieldNumber = 2;
                private string originator_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Originator
                {
                    get { return originator_; }
                    set
                    {
                        originator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "nestedPath" field.</summary>
                public const int NestedPathFieldNumber = 3;
                private string nestedPath_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string NestedPath
                {
                    get { return nestedPath_; }
                    set
                    {
                        nestedPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "nestedSpec" field.</summary>
                public const int NestedSpecFieldNumber = 4;
                private string nestedSpec_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string NestedSpec
                {
                    get { return nestedSpec_; }
                    set
                    {
                        nestedSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Header);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Header other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Command != other.Command) return false;
                    if (Originator != other.Originator) return false;
                    if (NestedPath != other.NestedPath) return false;
                    if (NestedSpec != other.NestedSpec) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Command != 0) hash ^= Command.GetHashCode();
                    if (Originator.Length != 0) hash ^= Originator.GetHashCode();
                    if (NestedPath.Length != 0) hash ^= NestedPath.GetHashCode();
                    if (NestedSpec.Length != 0) hash ^= NestedSpec.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Command != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteEnum((int)Command);
                    }
                    if (Originator.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Originator);
                    }
                    if (NestedPath.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(NestedPath);
                    }
                    if (NestedSpec.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(NestedSpec);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Command != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Command);
                    }
                    if (Originator.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Originator);
                    }
                    if (NestedPath.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(NestedPath);
                    }
                    if (NestedSpec.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(NestedSpec);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Header other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Command != 0)
                    {
                        Command = other.Command;
                    }
                    if (other.Originator.Length != 0)
                    {
                        Originator = other.Originator;
                    }
                    if (other.NestedPath.Length != 0)
                    {
                        NestedPath = other.NestedPath;
                    }
                    if (other.NestedSpec.Length != 0)
                    {
                        NestedSpec = other.NestedSpec;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    command_ = (global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.Command)input.ReadEnum();
                                    break;
                                }
                            case 18:
                                {
                                    Originator = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    NestedPath = input.ReadString();
                                    break;
                                }
                            case 34:
                                {
                                    NestedSpec = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Acknowledges registration.
            /// </summary>
            public sealed partial class RegistrationAck : pb::IMessage<RegistrationAck>
            {
                private static readonly pb::MessageParser<RegistrationAck> _parser = new pb::MessageParser<RegistrationAck>(() => new RegistrationAck());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<RegistrationAck> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RegistrationAck()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RegistrationAck(RegistrationAck other) : this()
                {
                    state_ = other.state_;
                    errorType_ = other.errorType_;
                    errorMessage_ = other.errorMessage_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public RegistrationAck Clone()
                {
                    return new RegistrationAck(this);
                }

                /// <summary>Field number for the "state" field.</summary>
                public const int StateFieldNumber = 1;
                private global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckState state_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckState State
                {
                    get { return state_; }
                    set
                    {
                        state_ = value;
                    }
                }

                /// <summary>Field number for the "errorType" field.</summary>
                public const int ErrorTypeFieldNumber = 2;
                private global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckError errorType_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckError ErrorType
                {
                    get { return errorType_; }
                    set
                    {
                        errorType_ = value;
                    }
                }

                /// <summary>Field number for the "errorMessage" field.</summary>
                public const int ErrorMessageFieldNumber = 3;
                private string errorMessage_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string ErrorMessage
                {
                    get { return errorMessage_; }
                    set
                    {
                        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as RegistrationAck);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(RegistrationAck other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (State != other.State) return false;
                    if (ErrorType != other.ErrorType) return false;
                    if (ErrorMessage != other.ErrorMessage) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (State != 0) hash ^= State.GetHashCode();
                    if (ErrorType != 0) hash ^= ErrorType.GetHashCode();
                    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (State != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteEnum((int)State);
                    }
                    if (ErrorType != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteEnum((int)ErrorType);
                    }
                    if (ErrorMessage.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(ErrorMessage);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (State != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)State);
                    }
                    if (ErrorType != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrorType);
                    }
                    if (ErrorMessage.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(RegistrationAck other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.State != 0)
                    {
                        State = other.State;
                    }
                    if (other.ErrorType != 0)
                    {
                        ErrorType = other.ErrorType;
                    }
                    if (other.ErrorMessage.Length != 0)
                    {
                        ErrorMessage = other.ErrorMessage;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    state_ = (global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckState)input.ReadEnum();
                                    break;
                                }
                            case 16:
                                {
                                    errorType_ = (global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.RegistrationAckError)input.ReadEnum();
                                    break;
                                }
                            case 26:
                                {
                                    ErrorMessage = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Acknowledges creation of device stream.
            /// </summary>
            public sealed partial class DeviceStreamAck : pb::IMessage<DeviceStreamAck>
            {
                private static readonly pb::MessageParser<DeviceStreamAck> _parser = new pb::MessageParser<DeviceStreamAck>(() => new DeviceStreamAck());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceStreamAck> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamAck()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamAck(DeviceStreamAck other) : this()
                {
                    streamId_ = other.streamId_;
                    state_ = other.state_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceStreamAck Clone()
                {
                    return new DeviceStreamAck(this);
                }

                /// <summary>Field number for the "streamId" field.</summary>
                public const int StreamIdFieldNumber = 1;
                private string streamId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string StreamId
                {
                    get { return streamId_; }
                    set
                    {
                        streamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "state" field.</summary>
                public const int StateFieldNumber = 2;
                private global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.DeviceStreamAckState state_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.DeviceStreamAckState State
                {
                    get { return state_; }
                    set
                    {
                        state_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceStreamAck);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceStreamAck other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (StreamId != other.StreamId) return false;
                    if (State != other.State) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (StreamId.Length != 0) hash ^= StreamId.GetHashCode();
                    if (State != 0) hash ^= State.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (StreamId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(StreamId);
                    }
                    if (State != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteEnum((int)State);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (StreamId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreamId);
                    }
                    if (State != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)State);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceStreamAck other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.StreamId.Length != 0)
                    {
                        StreamId = other.StreamId;
                    }
                    if (other.State != 0)
                    {
                        State = other.State;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    StreamId = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    state_ = (global::sitewhere_dotnet_agent.Lib.SiteWhere.Device.Types.DeviceStreamAckState)input.ReadEnum();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    #endregion

}

#endregion Designer generated code
